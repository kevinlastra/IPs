$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $var wire 1 7 clk $end
  $var wire 1 8 rst_n $end
  $scope module tb_fifo $end
   $var wire 1 7 clk $end
   $var wire 1 8 rst_n $end
   $var wire 10 , enq_data0 [9:0] $end
   $var wire 1 - enq_valid0 $end
   $var wire 1 . enq_ready0 $end
   $var wire 10 / deq_data0 [9:0] $end
   $var wire 1 0 deq_valid0 $end
   $var wire 1 1 deq_ready0 $end
   $var wire 1 9 flush0 $end
   $var wire 1 2 full0 $end
   $var wire 1 3 empty0 $end
   $var wire 10 # value [9:0] $end
   $var wire 10 4 value_n [9:0] $end
   $var wire 5 $ f0state [4:0] $end
   $var wire 5 5 f0state_n [4:0] $end
   $scope module fifo_0_i $end
    $var wire 32 : data_size [31:0] $end
    $var wire 32 ; buffer_size [31:0] $end
    $var wire 1 7 clk $end
    $var wire 1 8 rst_n $end
    $var wire 10 , enq_data [9:0] $end
    $var wire 1 - enq_valid $end
    $var wire 1 . enq_ready $end
    $var wire 10 / deq_data [9:0] $end
    $var wire 1 0 deq_valid $end
    $var wire 1 1 deq_ready $end
    $var wire 1 9 flush $end
    $var wire 1 2 full $end
    $var wire 1 3 empty $end
    $scope module nsize_buffer $end
     $var wire 10 & data[0] [9:0] $end
     $var wire 10 ' data[1] [9:0] $end
     $var wire 10 ( data[2] [9:0] $end
     $var wire 10 ) data[3] [9:0] $end
     $var wire 10 * data[4] [9:0] $end
     $var wire 5 6 wr_ptr [4:0] $end
     $var wire 5 % rd_ptr [4:0] $end
     $scope module unnamedblk1 $end
      $var wire 32 + i [31:0] $end
     $upscope $end
     $scope module unnamedblk2 $end
      $var wire 32 < i [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b0000000000 #
b00000 $
b00000 %
b0000000000 &
b0000000000 '
b0000000000 (
b0000000000 )
b0000000000 *
b00000000000000000000000000000000 +
b0000000000 ,
0-
1.
b0000000000 /
00
01
02
13
b0000000001 4
b00001 5
b00000 6
17
08
09
b00000000000000000000000000001010 :
b00000000000000000000000000000101 ;
b00000000000000000000000000000101 <
#1
07
#2
b00001 %
b00001 6
17
#3
07
#4
17
#5
07
#6
17
#7
07
#8
17
#9
07
#10
17
#11
07
#12
17
#13
07
#14
17
#15
07
#16
17
#17
07
#18
17
#19
07
#20
17
#21
07
#22
17
#23
07
#24
17
#25
07
#26
17
#27
07
#28
17
#29
07
#30
17
#31
07
#32
17
#33
07
#34
17
#35
07
#36
17
#37
07
#38
17
#39
07
#40
17
#41
07
#42
17
#43
07
#44
17
#45
07
#46
17
#47
07
#48
17
#49
07
#50
17
#51
07
#52
17
#53
07
#54
17
#55
07
#56
17
#57
07
#58
17
#59
07
#60
17
#61
07
#62
17
#63
07
#64
17
#65
07
#66
17
#67
07
#68
17
#69
07
#70
17
#71
07
#72
17
#73
07
#74
17
#75
07
#76
17
#77
07
#78
17
#79
07
#80
17
#81
07
#82
17
#83
07
#84
17
#85
07
#86
17
#87
07
#88
17
#89
07
#90
17
#91
07
#92
17
#93
07
#94
17
#95
07
#96
17
#97
07
#98
17
#99
07
#100
b0000000001 #
b00001 $
b0000000001 ,
1-
b00010 5
17
18
#101
07
#102
b00010 $
b0000000001 &
b00000000000000000000000000000101 +
b0000000000 ,
0-
b0000000001 /
10
11
03
b00011 5
b00010 6
17
#103
07
#104
b00011 $
b00010 %
b0000000001 ,
1-
b0000000000 /
00
01
13
b0000000010 4
17
#105
07
#106
b0000000010 #
b0000000001 '
b0000000010 ,
b0000000001 /
10
03
b0000000011 4
b00100 6
17
#107
07
#108
b0000000011 #
b0000000010 (
b0000000011 ,
b0000000100 4
b01000 6
17
#109
07
#110
b0000000100 #
b0000000011 )
b0000000100 ,
b0000000001 4
b00100 5
b10000 6
17
#111
07
#112
b0000000001 #
b00100 $
b0000000100 *
b0000000000 ,
0-
0.
11
12
b0000000010 4
b00101 5
b00001 6
17
#113
07
#114
b0000000010 #
b00101 $
b00100 %
1.
b0000000010 /
02
b0000000011 4
17
#115
07
#116
b0000000011 #
b01000 %
b0000000011 /
b0000000100 4
17
#117
07
#118
b0000000100 #
b10000 %
b0000000100 /
b0000000101 4
b10011 5
17
#119
07
